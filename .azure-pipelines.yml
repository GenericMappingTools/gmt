# Configuration for Azure Pipelines
########################################################################################

# Only build the master, 6.x and 5.4 branches, tags, and PRs (on by default)
# to avoid building random branches in the repository until a PR is opened.
trigger:
  branches:
    include:
    - master
    - 6.?
    - refs/tags/*

# Global variables
variables:
  # disable auto-display of GMT plots
  GMT_END_SHOW: off

jobs:

# Lint Checker
- job:
  displayName: 'Lint Checker'
  timeoutInMinutes: 360
  condition: eq(variables['Build.Reason'], 'Schedule')

  pool:
    vmImage: 'ubuntu-18.04'

  steps:
  - bash: |
      set -x -e
      sudo snap install cppcheck
      cppcheck --version
    displayName: Install cppcheck

  - bash: bash admin/run_cppcheck.sh src
    displayName: Run cppcheck

# Linux - Compile only
########################################################################################
- job:
  displayName: 'Linux | Compile only'
  condition: ne(variables['Build.Reason'], 'Schedule')

  pool:
    vmImage: 'ubuntu-18.04'

  variables:
    BUILD_DOCS: false
    DEPLOY_DOCS: false
    PACKAGE: false
    RUN_TESTS: false

  steps:
  - template: ci/azure-pipelines-linux.yml

# Linux - Compile only (no GDAL et. al.)
########################################################################################
- job:
  displayName: 'Linux | Compile only (GDAL et. al. excluded)'
  condition: ne(variables['Build.Reason'], 'Schedule')

  pool:
    vmImage: 'ubuntu-18.04'

  variables:
    BUILD_DOCS: false
    DEPLOY_DOCS: false
    PACKAGE: false
    RUN_TESTS: false
    EXCLUDE_OPTIONAL: true

  steps:
  - template: ci/azure-pipelines-linux.yml

# Linux - Build docs + Deploy docs + Package
########################################################################################
- job:
  displayName: 'Linux | Build docs + Deploy docs + Package'
  # Deploy documentation in master and 6.x branches
  condition: in(variables['Build.SourceBranchName'], 'master', '6.1', '6.2', '6.3', '6.4', '6.5')

  pool:
    vmImage: 'ubuntu-18.04'

  variables:
    BUILD_DOCS: true
    DEPLOY_DOCS: true
    PACKAGE: true
    RUN_TESTS: false

  steps:
  - template: ci/azure-pipelines-linux.yml

# Linux - Test
########################################################################################
- job:
  displayName: 'Linux | Test'
  condition: eq(variables['Build.Reason'], 'Schedule')

  pool:
    vmImage: 'ubuntu-18.04'

  variables:
    BUILD_DOCS: false
    DEPLOY_DOCS: false
    PACKAGE: false
    RUN_TESTS: true

  steps:
  - template: ci/azure-pipelines-linux.yml

# Mac - Compile only
########################################################################################
- job:
  displayName: 'Mac | Compile only'
  condition: ne(variables['Build.Reason'], 'Schedule')

  pool:
    vmImage: 'macOS-10.15'

  variables:
    BUILD_DOCS: false
    DEPLOY_DOCS: false
    PACKAGE: false
    RUN_TESTS: false

  steps:
  - template: ci/azure-pipelines-mac.yml

# Mac - Build docs + Package
########################################################################################
- job:
  displayName: 'Mac | Build docs + Package'
  condition: eq(variables['Build.Reason'], 'Schedule')

  pool:
    vmImage: 'macOS-10.15'

  variables:
    BUILD_DOCS: true
    DEPLOY_DOCS: false
    PACKAGE: true
    RUN_TESTS: false

  steps:
  - template: ci/azure-pipelines-mac.yml

# Mac - Test
########################################################################################
- job:
  displayName: 'Mac | Test'
  condition: eq(variables['Build.Reason'], 'Schedule')

  pool:
    vmImage: 'macOS-10.15'

  variables:
    BUILD_DOCS: false
    DEPLOY_DOCS: false
    PACKAGE: false
    RUN_TESTS: true

  steps:
  - template: ci/azure-pipelines-mac.yml

# Windows - Compile only
########################################################################################
- job:
  displayName: 'Windows | Compile only'
  condition: ne(variables['Build.Reason'], 'Schedule')
  timeoutInMinutes: 120

  pool:
    vmImage: 'windows-2019'

  variables:
    BUILD_DOCS: false
    DEPLOY_DOCS: false
    PACKAGE: false
    TEST: false

  steps:
  - template: ci/azure-pipelines-windows.yml

# Windows - Build Docs + Package
########################################################################################
- job:
  displayName: 'Windows | Build Docs + Package'
  condition: eq(variables['Build.Reason'], 'Schedule')
  timeoutInMinutes: 120

  pool:
    vmImage: 'windows-2019'

  variables:
    BUILD_DOCS: true
    DEPLOY_DOCS: false
    PACKAGE: true
    TEST: false

  steps:
  - template: ci/azure-pipelines-windows.yml

# Windows - Test
########################################################################################
- job:
  displayName: 'Windows | Test'
  # condition: eq(variables['Build.Reason'], 'Schedule')
  timeoutInMinutes: 180

  pool:
    vmImage: 'windows-2019'

  variables:
    BUILD_DOCS: false
    DEPLOY_DOCS: false
    PACKAGE: false
    TEST: true

  steps:
  - template: ci/azure-pipelines-windows.yml

# Docker
########################################################################################
- job:
  displayName: 'Docker | '
  condition: eq(variables['Build.Reason'], 'Schedule')

  variables:
    BUILD_DOCS: false
    DEPLOY_DOCS: false
    PACKAGE: false
    TEST: false

  strategy:
    matrix:
      Ubuntu1404:   # CMake 2.8.12 + GNU 4.8.4
        containerImage: ubuntu:14.04
      Ubuntu1604:   # CMake 3.5.1 + GNU 5.4.0
        containerImage: ubuntu:16.04
      Ubuntu1804:   # CMake 3.10.2 + GNU 7.4.0
        containerImage: ubuntu:18.04
      Debian9:      # CMake 3.7.2 + GNU 6.3.0
        containerImage: debian:stretch
      Debian10:     # CMake 3.13.4 + GNU 8.3.0
        containerImage: debian:buster
      DebianSid:    # CMake 3.16.3 + GNU 10.1.0
        containerImage: debian:sid


  container:
    image: $[ variables['containerImage'] ]
    # See https://github.com/microsoft/azure-pipelines-agent/issues/2043#issuecomment-500451567
    # for docker sudo workaround
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"

  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo
  - template: ci/azure-pipelines-linux.yml
