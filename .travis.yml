# Configuration file for TravisCI

# Define environment variables and set build actions
env:
    global:
        - INSTALLDIR="$HOME/gmt-install-dir"
        - COASTLINEDIR="$HOME/coastline"
        - PATH="$INSTALLDIR/bin:$PATH"
        - BUILD_DOCS=false
        - DEPLOY_DOCS=false
        - CCACHE_MAXSIZE=200M
        - CCACHE_COMPRESS=true
        # Encrypted Github token (GH_TOKEN)
        - secure: "cwHlTNa+b2lPiCbN5Ja9alj6EkKwJsuR5QcNPORrp3uCOQF9+cJUFEyMIGVGzrzZQnpjn05XYDr6eGFUYkbaR1QVUQdNH+2rCiScFHe94fRPJlJabxXexCfvZCNV8VRi6NSyFPuZKkCVs10bQ7Lk5dPS/V4Dalz1xyURcvI8H8XQFTmDYb/7QFw73l0WzNf+Y1rzNpRZEQ4ERhmnir489njCv1w7oJ0C+BrRvPqTmNmfXbrY6Bcana6BJvvumSY1xRaw60f/UNKYTlTVlYTVSWK1kq9mTfkhiJhe5oNoWchKloiOg3fA2XtAuucuXSdCjqo9aWHMxKJy+jQ7/BeId9hacvB9pVclYoOLARBcPoWDb21eKJZ8A70yKlUM3ryhVXM4drHzM4ITitPA1sEJWNJ2BQO8Cils0FfcOLvBR3NdbLi8RdHZItmU/Oe8o1srUTnnkdPRiEWbmAEs4pVrsHY9sD0660PXTFBSQ7sDXeyTl2etG/YSQKvE3ysOnZwhEuTXqf8cpo+tSbjindvWSyyN0HSuJ0bd7Ei+qWUQ3nJNEtHpiq8Ms6KUPHjPpWO2BEl+FQHWFpmRtwBg/REk36VWIl1UHSKuKkqxUT4qiZeL5zlrHGso+7QGhVjkYj5un3XoVObopFNVUB8y56xeW21gI51HK48cPd5rMnX95KE="

# We need sudo privileges for copying cached deb packages
sudo: required

language: c

cache:
    pip: true
    ccache: true
    directories:
        - $HOME/.ccache
        - $HOME/cache-gshhg-dcw
        - $HOME/cache-deb

before_cache:
    - rm -rf $HOME/.cache/pip/log

# Only build pushes to select branches and tags. This avoids the double
# builds than happen when working on a branch instead of a fork.
branches:
    only:
        - master
        - 6.0
        - 5.4
        # Regex to build tagged commits with version numbers
        - /\d+\.\d+(\.\d+)?(\S*)?$/

# Set the Ubuntu version for the Linux builds
dist: xenial

# Create the build matrix with different jobs for each platform and cron jobs
matrix:
    include:
        - name: "Linux (cron - build docs)"
          os: linux
          if: type = cron
          env:
            - BUILD_DOCS=true
            - DEPLOY_DOCS=true
            - HTML_BUILDDIR="build/doc/rst/html"

# Setup the build environment
before_install:
    - |-
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        # Download dependencies if not cached (https://stackoverflow.com/a/52446551)
        DEB_CACHE=$HOME/cache-deb
        DEB_PACKAGES="cmake ninja-build libcurl4-gnutls-dev libnetcdf-dev libgdal-dev libfftw3-dev libpcre3-dev liblapack-dev ghostscript curl"
        if [[ "$BUILD_DOCS" == "true" ]]; then
          DEB_PACKAGES="$DEB_PACKAGES graphicsmagick ffmpeg python python-pip"
        fi
        test -d $DEB_CACHE || mkdir $DEB_CACHE
        echo "Copy cached deb packages"
        sudo rsync -av ${DEB_CACHE}/ /var/cache/apt/archives/
        echo "Start to install software"
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends --no-install-suggests $DEB_PACKAGES
        echo "Update the cache"
        rsync -av /var/cache/apt/archives/*.deb ${DEB_CACHE}/
      fi
    - |-
    - ci/download-coastlines.sh
    # Install GMT documentation dependencies
    - if [[ "$BUILD_DOCS" == "true" ]]; then
        pip install --user sphinx;
      fi

# Install the package that we want to test
install:
    # Build and install GMT
    - ci/build-gmt.sh
    # Print ccache status
    - ccache --show-stats

# Run the actual tests and checks
script:
    - cd build
    # Run a few commands to make sure they don't crash
    - gmt defaults -Vd
    - gmt pscoast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -P -Vd > test.ps
    - gmt begin && gmt coast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -Vd && gmt end
    # Use set -e so that the build fails when a command fails.
    # The default action for Travis-CI is to continue running even if a command fails.
    - set -e
    - if [[ "$BUILD_DOCS" == "true" ]]; then
        cmake --build . --target docs_html_depends;
        cmake --build . --target docs_man_depends;
        (while sleep 300; do echo . ; done)&
        cmake --build . --target animation;
        kill %1;
        cmake --build . --target docs_html;
        cmake --build . --target docs_man;
      fi
    # Make source tarballs
    - set +e
    - cd ..

# Things to do if the build is successful
after_success:
    - if [ "$DEPLOY_DOCS" == "true" ]; then
        git clone --branch=1.1.1 --depth=1 https://github.com/fatiando/continuous-integration.git;
      fi

# Deploy build artifacts to external services
deploy:
    # Push the built HTML to the gh-pages branch
    - provider: script
      script: continuous-integration/travis/deploy-gh-pages.sh
      skip_cleanup: true
      on:
        branch: master
        condition: '"$DEPLOY_DOCS" == "true"'

notifications:
    email: false
