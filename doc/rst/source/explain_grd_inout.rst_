.. _grd_inout_full:

Grid File Formats
-----------------

By default GMT writes out grids as single precision floats in a COARDS-complaint netCDF file format.
However, GMT is able to produce and read grid files in many other commonly used grid file formats
and also facilitates so called "packing" of grids, writing out floating point data as 1- or 2-byte
integers. To specify the precision, scale and offset, the user should add the suffix
[**=**\ *id*][**+s**\ *scale*][**+o**\ *offset*][**+n**\ *invalid*], where
*id* is a two-letter identifier of the grid type and precision, and the
*scale*, *offset* and *invalid* are the arguments of optional modifiers to be applied
to all grid values,  Here, *invalid* is the value used to indicate missing
data. In case the *id* is not provided, as in **+s**\ *scale*
than a *id*\ **=**\ *nf* is assumed.
When reading grids, the format is generally automatically recognized from almost all of those formats
that GMT and GDAL combined offer. If not, the same suffix can be added to input grid file names.
See :doc:`grdconvert </grdconvert>` and Section :ref:`grid-file-format`
of the GMT Technical Reference and Cookbook for more information.

When reading a netCDF file that contains multiple grids, GMT will
read, by default, the first 2-dimensional grid that it can find in that
file. To coax GMT into reading another multi-dimensional variable in
the grid file, append **?**\ *varname* to the file name, where *varname*
is the name of the variable. Note that you may need to escape the
special meaning of **?** in your shell program by putting a backslash in
front of it, or by placing the filename and suffix between quotes or
double quotes. The **?**\ *varname* suffix can also be used for output
grids to specify a variable name different from the default: "z". See
:doc:`grdconvert </grdconvert>` and Sections :ref:`modifiers-for-CF` and :ref:`grid-file-format`
of the GMT Technical Reference and Cookbook for more information, particularly on
how to read slices of 3-, 4-, or 5-dimensional grids.
