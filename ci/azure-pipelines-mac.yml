# Template for macOS steps in Azure Pipelines

steps:

- bash: bash ci/install-dependencies-macos.sh
  displayName: Install GMT dependencies

- bash: echo "##vso[task.prependpath]$HOME/Library/Python/3.8/bin"
  displayName: Add sphinx to PATH
  condition: eq(variables['BUILD_DOCS'], true)

- bash: |
    echo "##vso[task.setvariable variable=INSTALLDIR]$BUILD_SOURCESDIRECTORY/gmt-install-dir"
    echo "##vso[task.setvariable variable=COASTLINEDIR]$BUILD_SOURCESDIRECTORY/coastline"
  displayName: Set install location and coastline location

- bash: echo "##vso[task.prependpath]$INSTALLDIR/bin"
  displayName: Set PATH

- task: Cache@2
  inputs:
    key: coastline | ci/download-coastlines.sh
    path: $(COASTLINEDIR)
    cacheHitVar: CACHE_COASTLINE_RESTORED
  displayName: Cache GSHHG and DCW data

- bash: ci/download-coastlines.sh
  displayName: Download coastlines
  condition: ne(variables['CACHE_COASTLINE_RESTORED'], true)

- bash: ci/config-gmt-unix.sh
  displayName: Configure GMT

- bash: |
    mkdir -p build
    cd build
    cmake -G Ninja ..
    cmake --build .
  displayName: Compile GMT

# Cache the ${HOME}/.gmt directory, for docs and testing
- task: Cache@2
  inputs:
    key: cachedata | 20200820-3
    path: $(HOME)/.gmt
    cacheHitVar: CACHE_CACHEDATA_RESTORED
  displayName: Cache GMT remote data for testing

- bash: |
    set -x -e
    cd build
    cmake --build . --target docs_depends
    cmake --build . --target optimize_images
    cmake --build . --target animation
    cmake --build . --target docs_html
    # if html.log isn't empty (i.e., sphinx raise warnings), return 1
    ! [ -s doc/rst/html.log ]
    cmake --build . --target docs_man
    # if man.log isn't empty (i.e., sphinx raise warnings), return 1
    ! [ -s doc/rst/man.log ]
  displayName: Build documentations
  condition: eq(variables['BUILD_DOCS'], true)

- bash: |
    cd build
    cmake --build . --target install
  displayName: Install GMT

- bash: |
    set -x -e
    gmt --version
    gmt-config --all
    gmt defaults -Vd
    gmt pscoast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -P -Vd > test.ps
    gmt begin && gmt coast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -Vd && gmt end
    gmt grdimage @earth_relief_01d -JH10c -Baf -Vd -pdf map
    gmt earthtide -T2018-06-18T12:00:00 -Gsolid_tide_up.grd
  displayName: Check a few simple commands

# Download remote files, if not already cached
- bash: |
    set -x -e
    # list of datasets used in tests
    data="@earth_relief_01d \
          @earth_relief_30m \
          @earth_relief_20m \
          @earth_relief_15m \
          @earth_relief_10m @earth_relief_10m_g \
          @earth_relief_06m \
          @earth_relief_05m @earth_relief_05m_g \
          @earth_relief_04m \
          @earth_relief_02m
          @earth_relief_01m \
          @earth_day_01d \
          @earth_day_20m \
          @earth_night_20m \
          @earth_age_06m \
          @earth_mask_05m"
    # Download remote data and cache files
    # download remote data multiple times to make sure all are downloaded
    gmt which -Ga $data
    gmt which -Ga $data
    gmt which -Ga $data
    gmt get -Dcache
    # Download extra tiles for tests
    # test/grdimage/rounding.sh
    gmt grdcut -R3:57/4:18/44:00/44:15 @earth_relief_03s -G/dev/null
  displayName: Download remote data
  condition: ne(variables['CACHE_CACHEDATA_RESTORED'], true)

# Run the full tests, and rerun failed tests
- bash: |
    set -x -e
    cd build
    ctest ${CTEST_ARGS} || ctest ${CTEST_ARGS} --rerun-failed
  displayName: Full tests
  env:
    CTEST_ARGS: "--output-on-failure --force-new-ctest-process -j4 --timeout 360"
  condition: eq(variables['RUN_TESTS'], true)

# Publish the whole build directory for debugging purpose
- task: CopyFiles@2
  inputs:
    contents: 'build/**/*'
    targetFolder: $(Build.ArtifactStagingDirectory)
  condition: failed()
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: BuildDirectory-macOS
  displayName: Publish build directory
  condition: failed()

# Upload test coverage even if build fails. Keep separate to make sure this task fails
# if the tests fail.
- bash: |
    set -x -e
    bash <(curl -s https://codecov.io/bash)
  env:
    CODECOV_TOKEN: $(codecov.token)
  condition: and(eq(variables['RUN_TESTS'], true), succeededOrFailed())
  displayName: Upload test coverage

- bash: |
    set -x -e
    cd build
    cmake --build . --target gmt_release
    cmake --build . --target gmt_release_tar
    cpack -G Bundle
    shasum -a 256 gmt-*.tar.gz gmt-*.tar.xz gmt-*.dmg
  displayName: Package GMT
  condition: eq(variables['PACKAGE'], true)

# Publish the macOS bundle
- bash: |
    cp build/gmt-*.dmg ${BUILD_ARTIFACTSTAGINGDIRECTORY}/gmt-${BUILD_SOURCEBRANCHNAME}-$(date +%Y%m%d)-nightly.dmg
  displayName: Copy macOS bundle
  condition: eq(variables['PACKAGE'], true)
- publish: $(Build.ArtifactStagingDirectory)/
  artifact: GMT-macOS-bundle
  displayName: Publish macOS Bundle
  condition: eq(variables['PACKAGE'], true)
