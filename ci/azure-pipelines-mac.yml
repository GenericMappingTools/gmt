# Template for macOS steps in Azure Pipelines

steps:

- bash: |
    set -x -e
    brew update
    brew install cmake ninja curl netcdf gdal fftw pcre2 ghostscript || true
  displayName: Install dependencies

- bash: |
    set -x -e
    brew install graphicsmagick || true
  displayName: Install dependencies for running tests
  condition: eq(variables['TEST'], true)

- bash: |
    set -x -e
    pip3 install --user sphinx
    echo "##vso[task.prependpath]$HOME/Library/Python/3.7/bin"
  displayName: Install dependencies for building documentation
  condition: eq(variables['BUILD_DOCS'], true)

- bash: |
    set -x -e
    # we need the GNU tar
    brew install gnu-tar
  displayName: Install dependencies for packaging
  condition: eq(variables['PACKAGE'], true)

- bash: |
    echo "##vso[task.setvariable variable=INSTALLDIR]$BUILD_SOURCESDIRECTORY/gmt-install-dir"
    echo "##vso[task.setvariable variable=COASTLINEDIR]$BUILD_SOURCESDIRECTORY/coastline"
  displayName: Set install location and coastline location

- bash: echo "##vso[task.prependpath]$INSTALLDIR/bin"
  displayName: Set PATH

- task: CacheBeta@0
  inputs:
    key: coastline
    path: $(COASTLINEDIR)
    cacheHitVar: CACHE_COASTLINE_RESTORED
  displayName: Cache GSHHG and DCW data

- bash: ci/download-coastlines.sh
  displayName: Download coastlines
  condition: ne(variables['CACHE_COASTLINE_RESTORED'], true)

- bash: ci/config-gmt-unix.sh
  displayName: Configure GMT

- bash: |
    mkdir -p build
    cd build
    cmake -G Ninja ..
    cmake --build .
  displayName: Compile GMT

- bash: |
    set -x -e
    cd build
    cmake --build . --target docs_depends
    cmake --build . --target docs_html
    cmake --build . --target docs_man
  displayName: Build documentations
  condition: eq(variables['BUILD_DOCS'], true)

- bash: |
    cd build
    cmake --build . --target install
  displayName: Install GMT

- bash: |
    set -x -e
    gmt --version
    gmt-config --all
    gmt defaults -Vd
    gmt pscoast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -P -Vd > test.ps
    gmt begin && gmt coast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -Vd && gmt end
    gmt grdimage @earth_relief_60m -JH10c -Baf -pdf map
    gmt earthtide -T2018-06-18T12:00:00 -Gsolid_tide_up.grd
  displayName: Check a few simple commands

# Run the full tests
- bash: |
    set -x -e
    cd build
    # Download remote files before testing, see #939.
    curl -k https://oceania.generic-mapping-tools.org/gmt_hash_server.txt | awk 'NF==3 && $1!~/earth/ {print "@"$1}' | xargs gmt which -Gc
    gmt which -Gu @earth_relief_01m @earth_relief_02m @earth_relief_04m @earth_relief_05m @earth_relief_10m @earth_relief_15m
    # run all jobs and rerun if failed
    ctest ${CTEST_ARGS} || ctest ${CTEST_ARGS} --rerun-failed
  displayName: Full tests
  env:
    CTEST_ARGS: "--output-on-failure --force-new-ctest-process -j4 --timeout 360"
  condition: eq(variables['TEST'], true)

# Publish the whole build directory for debugging purpose
- task: CopyFiles@2
  inputs:
    contents: 'build/**/*'
    targetFolder: $(Build.ArtifactStagingDirectory)
  condition: failed()
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: BuildDirectory-macOS
  displayName: Publish build directory
  condition: failed()

# Upload test coverage even if build fails. Keep separate to make sure this task fails
# if the tests fail.
- bash: |
    set -x -e
    bash <(curl -s https://codecov.io/bash)
  env:
    CODECOV_TOKEN: $(codecov.token)
  condition: and(eq(variables['TEST'], true), succeededOrFailed())
  displayName: Upload test coverage

- bash: |
    set -x -e
    cd build
    cmake --build . --target gmt_release
    cmake --build . --target gmt_release_tar
    cpack -G Bundle
    shasum -a 256 gmt-*.tar.gz gmt-*.tar.xz gmt-*.dmg
  displayName: Package GMT
  condition: eq(variables['PACKAGE'], true)

# Publish the macOS bundle
- bash: |
    cp build/gmt-*.dmg ${BUILD_ARTIFACTSTAGINGDIRECTORY}/gmt-${BUILD_SOURCEBRANCHNAME}-$(date +%Y%m%d)-nightly.dmg
  displayName: Copy macOS bundle
  condition: eq(variables['PACKAGE'], true)
- publish: $(Build.ArtifactStagingDirectory)/
  artifact: GMT-macOS-bundle
  displayName: Publish macOS Bundle
  condition: eq(variables['PACKAGE'], true)
