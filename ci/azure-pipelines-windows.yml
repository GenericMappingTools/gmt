# Template for Windows steps in Azure Pipelines

steps:

# Cache vcpkg installed libraries
# Currently, caches are immutable and can't be updated.
# To rebuild the cache, you have to change the date in the key list
- task: Cache@2
  inputs:
    key: $(Agent.OS) | vcpkg | 20200206
    path: $(VCPKG_INSTALLATION_ROOT)/installed/
    cacheHitVar: CACHE_VCPKG_RESTORED
  displayName: Cache vcpkg libraries

- bash: |
    set -x -e
    # Update vcpkg and checkout specific tag
    cd ${VCPKG_INSTALLATION_ROOT}
    git fetch --tags
    git tag
    git checkout tags/2020.01
    # By default, vcpkg builds both release and debug configurations.
    # Set VCPKG_BUILD_TYPE to build release only to save half time
    echo 'set (VCPKG_BUILD_TYPE release)' >> ${VCPKG_INSTALLATION_ROOT}/triplets/${WIN_PLATFORM}.cmake
    cat ${VCPKG_INSTALLATION_ROOT}/triplets/${WIN_PLATFORM}.cmake
    # install libraries
    vcpkg install netcdf-c gdal pcre fftw3[core,threads] clapack openblas --triplet ${WIN_PLATFORM}
  displayName: Install dependencies via vcpkg
  env:
    WIN_PLATFORM: "x64-windows"
  condition: ne(variables['CACHE_VCPKG_RESTORED'], true)

- bash: |
    # hook up user-wide integration
    vcpkg integrate install
    # list installed libraries
    vcpkg list
    # Executable files search for DLL files in the directories listed in the PATH environment variable.
    echo "##vso[task.prependpath]${VCPKG_INSTALLATION_ROOT}/installed/${WIN_PLATFORM}/bin"
    # Tools like gdal_translate, ogr2ogr are located in tools/gdal
    echo "##vso[task.prependpath]${VCPKG_INSTALLATION_ROOT}/installed/${WIN_PLATFORM}/tools/gdal"
  displayName: Configure vcpkg
  env:
    WIN_PLATFORM: "x64-windows"

- bash: |
    set -x -e
    choco install ninja
    choco install ghostscript
  displayName: Install dependencies via chocolatey

- bash: |
    set -x -e
    choco install pngquant
    pip install --user sphinx
    echo "##vso[task.prependpath]C:\\Users\\VssAdministrator\\AppData\\Roaming\\Python\\Python37\\Scripts"
  displayName: Install dependencies for documentation
  condition: eq(variables['BUILD_DOCS'], true)

- bash: |
    set -x -e
    choco install graphicsmagick
    echo "##vso[task.prependpath]C:\\Program Files\\GraphicsMagick-1.3.32-Q8"
    choco install ffmpeg
    echo "##vso[task.prependpath]C:\\ProgramData\\chocolatey\\lib\\ffmpeg\\tools"
  displayName: Install dependencies for testing
  condition: eq(variables['TEST'], true)

- bash: |
    echo "##vso[task.setvariable variable=INSTALLDIR]$BUILD_SOURCESDIRECTORY/gmt-install-dir"
    echo "##vso[task.setvariable variable=COASTLINEDIR]$BUILD_SOURCESDIRECTORY/coastline"
  displayName: Set install location and coastline location

- bash: |
    echo "##vso[task.prependpath]$INSTALLDIR/bin"
    echo "##vso[task.prependpath]C:\\Program Files\\Git\\usr\\bin"
  displayName: Set PATH

- task: Cache@2
  inputs:
    key: coastline | ci/download-coastlines.sh
    path: $(COASTLINEDIR)
    cacheHitVar: CACHE_COASTLINE_RESTORED
  displayName: Cache GSHHG and DCW data

- bash: ci/download-coastlines.sh
  displayName: Download coastlines
  condition: ne(variables['CACHE_COASTLINE_RESTORED'], true)

- bash: ci/config-gmt-windows.sh
  displayName: Configure GMT

# Azure Pipelines cannot find Visual Studio correctly if Ninja is used.
# Here, we need
# 1. call the vcvars64.bat script
# 2. define CMAKE_C_COMPILER
- script: |
    mkdir build
    cd build
    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
    cmake .. -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake -DCMAKE_C_COMPILER=cl.exe -DCMAKE_BUILD_TYPE=Release
    cmake --build .
  displayName: Compile GMT

- bash: |
    set -x -e
    cd build
    cmake --build . --target docs_depends
    cmake --build . --target optimize_images
    cmake --build . --target docs_html
    cmake --build . --target docs_man
  displayName: Build documentations
  condition: eq(variables['BUILD_DOCS'], true)

- script: |
    cd build
    cmake --build . --target install
  displayName: Install GMT

- script: |
    gmt --version
    bash %INSTALLDIR%/bin/gmt-config --all
    gmt defaults -Vd
    gmt pscoast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -P -Vd > test.ps
    gmt begin && gmt coast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -Vd && gmt end
    gmt grdimage @earth_relief_60m -JH10c -Baf -pdf map
    gmt earthtide -T2018-06-18T12:00:00 -Gsolid_tide_up.grd
  displayName: Check a few simple commands

- bash: |
    set -x -e
    # Download cache files from remote server before testing, see see #939.
    $(gmt --show-sharedir)/tools/gmt_getremote.sh cache
    # Download earth relief files used in testing
    gmt which -Gu @earth_relief_01m @earth_relief_02m @earth_relief_04m @earth_relief_05m @earth_relief_10m @earth_relief_15m
    # disable MinGW's path conversion, see #1035.
    export MSYS_NO_PATHCONV=1
    # run all jobs, and rerun failed jobs
    cd build
    ctest ${CTEST_ARGS} || ctest ${CTEST_ARGS} --rerun-failed || ctest ${CTEST_ARGS} --rerun-failed
  displayName: Full tests
  env:
    CTEST_ARGS: "--output-on-failure --force-new-ctest-process -j4 --timeout 480"
  condition: eq(variables['TEST'], true)

- script: |
    cd doc/examples
    call do_examples.bat
  displayName: Run DOS batch examples
  condition: eq(variables['TEST'], true)
  enabled: false

# Publish the whole build directory for debugging purpose
- task: CopyFiles@2
  inputs:
    contents: 'build/**/*'
    targetFolder: $(Build.ArtifactStagingDirectory)
  condition: failed()
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: BuildDirectory-Windows
  displayName: Publish build directory
  condition: failed()

- bash: |
    set -x -e
    cd build
    cmake --build . --target gmt_release
    cmake --build . --target gmt_release_tar
    # Don't use cpack here. Chocolatey also provides a cpack command.
    cmake --build . --target package
    cmake -E sha256sum gmt-*.tar.gz gmt-*.tar.xz gmt-*.exe
  displayName: Package GMT
  condition: eq(variables['PACKAGE'], true)
